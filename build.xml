<project name="riot-skeleton" default="webapp" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!--
	  - File and directory names
	  - ========================
	  -
	  - Only change these properties if you want to use
	  - another project layout.
	 -->

	<!-- Location of the project's source and resource files -->
	<property name="src.dir" value="src" />

	<!-- The web content -->
	<property name="web.dir" value="webapp" />

	<!-- Location of the WEB-INF/lib directory -->
	<property name="web.lib.dir" value="${web.dir}/WEB-INF/lib" />

	<!-- Directory where libraries are stored that are not needed at runtime -->
	<property name="lib.dir" value="lib" />

	<!-- Directory where classes and artifacts are created -->
	<property name="build.dir" value="build" />

	<!-- Directory where the compile target will generate the class files -->
	<property name="build.classes.dir" value="${build.dir}/classes" />

	<!-- The default configuration profile -->
	<property name="profile" value="${user.name}" />
	
	<!-- If this property is set a confirmation is required for uploads -->
	<condition property="upload.needs.confirmation">
		<equals arg1="live" arg2="${profile}"/>
	</condition>

	<!-- Location of the different confiuration profiles -->
	<property name="conf.dir" value="conf" />

	<!-- Name of the jar file created by the jar target -->
	<property name="jar.name" value="${ant.project.name}.jar" />

	<!-- Name of the war file created by the war target -->
	<property name="war.name" value="${ant.project.name}-${profile}.war" />

	<!-- Location of the war file created by the war target -->
	<property name="war.location" location="${build.dir}/${war.name}" />

	<property name="ivy.download" value="http://riotfamily.org/ivy/ivy-2.0.0-beta2.jar" />
	<property name="ivy.jar.name" value="ivy2.jar" />
	<property name="ivy.jar" value="${lib.dir}/${ivy.jar.name}" />

	<taskdef resource="org/apache/ivy/ant/antlib.xml"
			uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar}"
			onerror="ignore" />

	<!--
	  - The classpath. Includes all jar files in lib and WEB-INF/lib.
	  -->
	<path id="classpath">
		<fileset dir="${lib.dir}" includes="*.jar" />
		<fileset dir="${web.lib.dir}" includes="*.jar" />
		<pathelement path="${java.class.path}" />
	</path>

	<!--
	  - Resource files to be included in the jar. By default all files found
	  - the source directory are included except for .java files and Ant's
	  - default excludes.
	 -->
	<patternset id="jar.resource.patterns">
		<exclude name="**/*.java" />
	</patternset>

	<!--
	  - Adding the official supported "_svn" hack directories.
	  - http://ant.apache.org/manual/CoreTasks/defaultexcludes.html
	 --> 
	<defaultexcludes add="**/_svn"/>
	<defaultexcludes add="**/_svn/**"/>

	<!--
	  - Creates output directories.
	 -->
	<target name="init">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${lib.dir}" />
		<mkdir dir="${web.lib.dir}" />
	</target>
	
	<!--
	  - Cleans the output directories.
	 -->
	<target name="clean" description="Cleans the project">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${build.dir}" />
		</delete>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${lib.dir}">
				<exclude name="${ivy.jar.name}" />
			</fileset>
		</delete>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${web.lib.dir}" /> 
		</delete>
	</target>

	<!--
	  - Cleans the build.classes.dir for complete rebuilds
	 -->
	<target name="cleanclasses" description="Cleans the build.classes.dir">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${build.classes.dir}" />
		</delete>
	</target>

	<!--
	  - Cleans everything.
	 -->
	<target name="distclean" description="Cleans everything" depends="clean">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${lib.dir}" />
		</delete>
	</target>

	<!--
	  - Resolves the project's dependencies. Runtime dependencies are copied
	  - to ${web.lib.dir} (webapp/WEB-INF/lib). Dependencies that are provided
	  - by the container during runtime, but are required in order to compile
	  - the project with Ant are copied to ${lib.dir}.
	 -->
	<target name="resolve" depends="init,-configure-ivy"
			description="Resolves the project's dependencies">
		<echo message="Retrieving module dependencies" />
		<ivy:resolve showprogress="false" />
		<ivy:retrieve pattern="${lib.dir}/[artifact].[ext]" log="quiet" conf="standalone,src" />
		<ivy:retrieve pattern="${web.lib.dir}/[artifact].[ext]" conf="runtime" />
	</target>

	<!--
	 -->
	<target name="retrieve-sources" depends="init,-configure-ivy"
			description="Downloads the source code of the dependencies (if available)">
		<echo message="Retrieving 3rd party sources" />
		<ivy:resolve showprogress="false" />
		<ivy:retrieve pattern="${lib.dir}/[artifact].[ext]" conf="src" />
	</target>

	<!--
	  - Compiles the java sources to ${build.classes.dir}. Additionally all
	  - files matched by the jar.resource.patterns patternset are copied.
	 -->
	<target name="compile" depends="init"
			description="Compiles the project's Java sources">
		<mkdir dir="${build.classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${build.classes.dir}"
			source="1.5" target="1.5" deprecation="on" debug="on">
			<classpath refid="classpath" />
		</javac>
		<copy todir="${build.classes.dir}">
			<fileset dir="${src.dir}">
				<patternset refid="jar.resource.patterns" />
			</fileset>
		</copy>
	</target>

	<!--
	  - Copys the compiled classes (and merged properties) to WEB-INF/classes.
	 -->
	<target name="webapp" depends="resolve,compile"
			description="Copys the compiled classes to WEB-INF/classes">
		<copy todir="${web.dir}/WEB-INF/classes">
			<fileset dir="${build.classes.dir}" />
			<fileset dir="${conf.dir}" />
		</copy>
	</target>

	<!--
	  - Creates a jar file containing all files in ${build.classes.dir}.
	 -->
	<target name="jar" depends="compile"
			description="Creates a Jar file containing the files in /build/classes">
		<jar jarfile="${build.dir}/${jar.name}">
			<fileset dir="${build.classes.dir}" />
		</jar>
	</target>

	<!--
	  - Creates a war file.
	 -->
	<target name="war" depends="resolve,jar" description="Creates a WAR archive">
		<delete file="${war.location}" />
		<war destfile="${war.location}" webxml="${web.dir}/WEB-INF/web.xml">
			<fileset dir="${web.dir}">
				<exclude name="WEB-INF/web.xml" />
				<exclude name="WEB-INF/classes/**" />
				<exclude name="WEB-INF/temp/**" />
				<exclude name="media" />
				<exclude name="media/**" />
			</fileset>
			<lib file="${build.dir}/${jar.name}" />
			<classes dir="${conf.dir}" />
		</war>
	</target>

	<!--
	  - Deploys a war file.
	 -->
	<target name="deploy"
		depends="war,-upload-war,-exec-deploy-command"
		description="Deploys a WAR file to a remote server via SCP">
	</target>

	<!--
	  - Confirm the upload if necessary
	 -->
	<target name="-confirm-upload" if="upload.needs.confirmation">
		<input addproperty="live.deploy.confirmed" validargs="Y,n" defaultvalue="n"
			message="Are you sure you want to deploy to '${profile}'?"></input>

		<condition property="do.abort">
			<equals arg1="n" arg2="${live.deploy.confirmed}"/>
		</condition>
		<fail if="do.abort" message="The deploy to '${profile}' has not been confirmed." />		
	</target>

	<!--
	  - Initializes the upload via scp.
	 -->
	<target name="-init-upload" depends="-confirm-upload">
		<!-- Check if JSch is available -->
		<available classname="com.jcraft.jsch.JSchException" property="jsch.available" value="true" />
		<fail unless="jsch.available" message="The deploy target uses the scp and sshexec tasks which both depend on jsch.jar. See http://ant.apache.org/manual/install.html#librarydependencies for details." />

		<!-- Read properties from the deploy.properties file(s) -->
		<property file="${conf.dir}/${profile}/deploy.properties" />
		<property file="${conf.dir}/default/deploy.properties" />

		<fail unless="deploy.host" message="The property deploy.host must be specified in ${conf.dir}/$${profile}/deploy.properties" />

		<!-- Set some reasonable defaults -->
		<property name="deploy.user.name" value="${user.name}" />
		<property name="deploy.keyfile" value="${user.home}/.ssh/id_rsa" />
		<property name="deploy.passphrase" value="" />
		<property name="deploy.upload.dir" value="~" />

		<!-- Append a timestamp to the remote filename -->
		<tstamp>
			<format property="deploy.timestamp" pattern="yyyyMMddHHmmss" />
		</tstamp>
	</target>	
	
	<!--
	  - Uploads a WAR file via scp.
	 -->
	<target name="-upload-war" depends="-init-upload">
		<property name="deploy.upload.name" value="${ant.project.name}-${deploy.timestamp}.war" />
		<property name="deploy.upload.location" value="${deploy.upload.dir}/${deploy.upload.name}" />

		<!-- Finally upload the file -->
		<scp keyfile="${deploy.keyfile}" passphrase="${deploy.passphrase}" trust="true"
			localFile="${war.location}"
			remoteTofile="${deploy.user.name}@${deploy.host}:${deploy.upload.location}" />
	</target>

	<!--
	  - Executes ${deploy.command} on ${deploy.host} via ssh.
	 -->
	<target name="-exec-deploy-command" depends="-upload-war" if="deploy.command">
		<property prefix="eval" file="${conf.dir}/${profile}/deploy.properties" />
		<property prefix="eval" file="${conf.dir}/default/deploy.properties" />
		<sshexec host="${deploy.host}" username="${deploy.user.name}" trust="true"
			keyfile="${deploy.keyfile}" passphrase="${deploy.passphrase}"
			command="${eval.deploy.command}" />
	</target>
	
	<!--
	  - Creates a dependency report as HTML file.
	 -->
	<target name="report" depends="resolve"
			description="Creates a dependency report as HTML file">
		
		<ivy:report todir="${build.dir}/reports" conf="runtime" graph="false" />

		<!--
		  - Uncomment the following block to generate a .dot file render it
		  - using GraphViz (if available). If you are using a Mac you can also
		  - import the .dot file into OmniGraffle.
		 -->

		<!--
		<property name="dotxsl.file" value="${build.dir}/report2dot.xsl" />
		<get src="http://www.riotfamily.org/ivy/report2dot.xsl"
				dest="${dotxsl.file}" />

			<ivy:report todir="${build.dir}/reports" conf="runtime" graph="false"
				xslfile="${dotxsl.file}" xslext="dot" />

			<exec executable="/usr/bin/dot">
				<arg value="-Tpng" />
				<arg value="-o${build.dir}/reports/dependencies.png" />
				<arg value="${build.dir}/reports/${ivy.organisation}-${ivy.module}-runtime.dot" />
			</exec>
		-->
	</target>

	<target name="-configure-ivy" depends="-install-ivy" unless="ivy.configured">
		<available file="ivysettings-local.xml" property="ivysettings" value="ivysettings-local.xml" />
		<property name="ivysettings" value="ivysettings.xml" />
		<ivy:configure id="ivy.instance" file="${ivysettings}" override="true" />
		<property name="ivy.configured" value="true" />
	</target>

	<!--
	  - Invoked by skeleton.xml to perform initial setup.
	 -->
	<target name="setup" depends="resolve,webapp" />

	<!--
	  - Installs Ivy (if needed).
	 -->
	<target name="-install-ivy" depends="-download-ivy" if="ivy.downloaded">
		<taskdef resource="org/apache/ivy/ant/antlib.xml"
			uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar}"
			onerror="ignore" />
	</target>

	<!--
	  - Downloads the Ivy jar file from riotfamily.org.
	 -->
	<target name="-download-ivy" depends="-check-ivy" unless="ivy.available">
		<echo>This project uses Ivy (http://ant.apache.org/ivy/) to manage dependencies.</echo>
		<echo>Ivy was not found in the classpath the JAR file will now be downloaded ...</echo>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${lib.dir}" />
		</delete>
		<mkdir dir="${lib.dir}" />
		<get src="${ivy.download}" dest="${ivy.jar}" verbose="true" />
		<property name="ivy.downloaded" value="true" />
	</target>

	<!--
	  - Checks whether Ivy is present in the lib dir.
	 -->
	<target name="-check-ivy">
		<available property="ivy.available" file="${ivy.jar}" />
	</target>

</project>
